---
name: Modules.Map.Polyline
summary: Represents a bounded area on the map.
description: |
    The `Polyline` object gives you low-level control over polylines that can be added to a
    [map view](Modules.Map.View). A polyline must have its `points` property set to appear on a map.

    Use the <Modules.Map.createPolyline> method to create a polyline.
extends: Titanium.Proxy
since: { android: "4.1.0", iphone: "4.1.0", ipad: "4.1.0" }
platforms: [android, iphone, ipad]
properties:
  - name: points
    summary: Array of map points making up the polyline. Can also be an array of longitude (index 0), latitude (index 1) touples.
    availability: creation
    type: Array<MapPointType>
    optional: false

  - name: strokeColor
    summary: |
        Color to use for the the polyline, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: String
    default: black

  - name: strokeWidth
    summary: Line width in pixels to use when drawing the polyline.
    type: Number
    default: 10
    
  - name: touchEnabled
    summary: Determines whether view should receive touch events.
    type: Boolean
    default: true
    since: "6.2.0"

  - name: zIndex
    summary: |
        The order (depth) in which to display the polylines.
    description: |
        For iOS, the polylines are drawn in the order in which they are added.
    availability: creation
    type: Number
    platforms: [android]

  - name: pattern
    summary: Pattern used to draw the polylines.
    description: |
        As per default polylines are drawn with a solid line. You can specify to 
        draw them with a dashed line using <Modules.Map.POLYLINE_PATTERN_DASHED> 
        or with a dotted line using <Modules.Map.POLYLINE_PATTERN_DOTTED>.

        You can also specify the dimensions to use when you create a dashed or 
        dotted polyline.

        For a dashed polyline, you can do something like this:

        ``` javascript
        polyline.setPattern({
            type: TiMap.POLYLINE_PATTERN_DASHED,
            gapLength: 25,
            dashLength: 50
        });
        ```

        or for a dotted polyline, you can do:

        ``` javascript
        polyline.setPattern({
            type: TiMap.POLYLINE_PATTERN_DOTTED,
            gapLength: 25
        });
        ```
    type: Object
    platforms: [android, iphone, ipad]
    since: "6.2.0"
